#!/usr/bin/env ruby
gem 'help_parser', '~>6.5'; require 'help_parser'

OPTIONS = HelpParser['1.10.191127', <<HELP]
Usage:
  todoist [:options+] <command=COMMAND> [:modifiers+]
Options:
  -t --trace
  --ap        \tUse Awesome Print
Modifiers:
  --id=ID
  --data=HASH \tMust be JSON parseable
  --delete
Types:
  COMMAND /^(projects)|(tasks)|(comments)$/
  ID      /^\\d+$/
  HASH    /^{.*}$/
Exclusive:
  delete data
# Todoist REST API Reference
# https://developer.todoist.com/rest/v1/
# Set and export bearer token via the enviroment variable $token.
HELP

require 'json'
require 'web_api'
if OPTIONS.ap?
  require 'awesome_print'
  # Monkey patching CRStruct providing #ai for AwesomePrint.
  module CRStruct
    class Open
      def ai(options = {})
        @h.ai(options)
      end
    end
  end
end

def show(obj)
  OPTIONS.ap? ? ap(obj) : pp(obj)
end

# Notice the trailing directory mark "/" on the service root provided to WebApi.new.
# This is needed because WebApi does a simple string concatenation when
# extending the url... that is, it does not use File.join.
# One needs to be aware of how the url is built up along the invocation chain.
# I also give `WebApi.new` the initial header.
# Todoist uses an authentication token that's given in the header's :Authorization key.
# As this key is always used, I set it at the root of the api.
# Lastly, to trace each http request,
# I pass a block to receive the http arguments which I then show.
api = WEB_API::WebApi.new(
'https://api.todoist.com/rest/v1/',
header: {Authorization: "Bearer #{ENV['TODOIST_TOKEN']}"}
) do |request|
  show request if OPTIONS.trace?
end

# To get the list of projects, I can just run unregistered
#     api.projects
# WebApi then automatically registers :projects as
#     api.add :projects, 'projects'
# or equivalently
#     api.add :projects

# The path to a project of a given id is
#   projects/<id>
# Defining the `project` method right on the api object is syntatic sugar.
def api.project(id)
  self.projects("/#{id}")
end

# The :post method version of projects...
# I don't need the :Authorization key in `POST_HEADER` because
# it gets merged with the header defined at the root of the api.
POST_HEADER = {'Content-Type': 'application/json', 'X-Request_id': '$(uuidgen)'}
api.add :projects_post, 'projects', type: :post, header: POST_HEADER

# Again.  For syntatic sugar,
# definining a project update method right on the api object.
def api.project_update(id, data)
  self.projects_post("/#{id}", data: data)
end

# And the new project method...
def api.new_project(data)
  self.projects_post(data)
end

api.add :projects_delete, 'projects', type: :delete
def api.delete_project(id)
  self.projects_delete("/#{id}")
end

case OPTIONS.command
when 'projects'
  data = (_=OPTIONS.data)? JSON.parse(_) : nil
  if id = OPTIONS.id
    # Want a particular project.
    if data
      # We want to modify the project.
      show api.project_update(id, data)
    elsif OPTIONS.delete?
      show api.delete_project(id)
    else
      show api.project(id)
    end
  else
    # Not specifying a particular project.
    if data
      # Want to create a new project
      show api.new_project(data)
    else
      show api.projects
    end
  end
when 'tasks'
  if OPTIONS.id? or OPTIONS.data?
    $stderr.puts "Tasks features not implemented"
    exit 1
  else
    show api.tasks
  end
when 'comments'
  $stderr.puts "Comments not implemented"
  exit 1
else
  $stderr.puts "Unrecognized command: #{OPTIONS.command}"
  exit 64
end
